{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates the serverless resources for the Natural Facade project.",
  "Parameters": {
    "Environment": {
      "Description": "Name of the environment to use to identify resources.",
      "Type": "String"
    },
    "ApiBuildFilename": {
      "Description": "The filename of the API build.",
      "Type": "String"
    }
  },
  "Resources": {
    "ApiGatewayApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": "API Gateway to provide a RESTful interface.",
        "Name": {
          "Fn::Join": [
            "-",
            [
              "NaturalFacade",
              {
                "Ref": "Environment"
              }
            ]
          ]
        },
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        }
      }
    },
    "ApiGatewayAuthorizer": {
      "DependsOn": [
        "ApiGatewayApi"
      ],
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "IdentitySource": "method.request.header.Authorization",
        "Name": "CognitoAuth",
        "ProviderARNs": [
          "arn:aws:cognito-idp:ap-southeast-2:582929002414:userpool/ap-southeast-2_tZVt8zq3R"
        ],
        "RestApiId": {
          "Ref": "ApiGatewayApi"
        },
        "Type": "COGNITO_USER_POOLS"
      }
    },
    "ApiGatewayAnonResource": {
      "DependsOn": [
        "ApiGatewayApi"
      ],
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayApi",
            "RootResourceId"
          ]
        },
        "PathPart": "anon"
      }
    },
    "ApiGatewayAnonGetMethod": {
      "DependsOn": [
        "ApiGatewayAnonResource"
      ],
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "#set($queryString = $input.params().querystring){\"payload\":{\"RequestType\":\"$util.escapeJavaScript($queryString.get('RequestType'))\",\"UserId\":\"$util.escapeJavaScript($queryString.get('UserId'))\",\"LayoutId\":\"$util.escapeJavaScript($queryString.get('LayoutId'))\"}}"
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ApiAnonHandlerLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": false
            },
            "StatusCode": 200
          }
        ],
        "ResourceId": {
          "Ref": "ApiGatewayAnonResource"
        },
        "RestApiId": {
          "Ref": "ApiGatewayApi"
        }
      }
    },
    "ApiGatewayAnonOptionsMethod": {
      "DependsOn": [
        "ApiGatewayAnonResource"
      ],
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ],
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "Type": "MOCK"
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            },
            "StatusCode": 200
          }
        ],
        "ResourceId": {
          "Ref": "ApiGatewayAnonResource"
        },
        "RestApiId": {
          "Ref": "ApiGatewayApi"
        }
      }
    },
    "ApiGatewayAuthResource": {
      "DependsOn": [
        "ApiGatewayApi"
      ],
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayApi",
            "RootResourceId"
          ]
        },
        "PathPart": "auth"
      }
    },
    "ApiGatewayAuthGetMethod": {
      "DependsOn": [
        "ApiGatewayAuthResource"
      ],
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "ApiGatewayAuthorizer"
        },
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "GET",
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\n\"payload\":$input.json('$'),\n\"context\":\n{\"userId\":\"$context.authorizer.claims.sub\",\"email\":\"$context.authorizer.claims.email\",\"sourceIp\":\"$context.identity.sourceIp\",\"userAgent\":\"$context.identity.userAgent\",\"requestId\":\"$context.requestId\"}\n}"
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ApiAuthHandlerLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": false
            },
            "StatusCode": 200
          }
        ],
        "ResourceId": {
          "Ref": "ApiGatewayAuthResource"
        },
        "RestApiId": {
          "Ref": "ApiGatewayApi"
        }
      }
    },
    "ApiGatewayAuthPostMethod": {
      "DependsOn": [
        "ApiGatewayAuthResource"
      ],
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "ApiGatewayAuthorizer"
        },
        "HttpMethod": "POST",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\n\"payload\":$input.json('$'),\n\"context\":\n{\"userId\":\"$context.authorizer.claims.sub\",\"email\":\"$context.authorizer.claims.email\",\"sourceIp\":\"$context.identity.sourceIp\",\"userAgent\":\"$context.identity.userAgent\",\"requestId\":\"$context.requestId\"}\n}"
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ApiAuthHandlerLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": false
            },
            "StatusCode": 200
          }
        ],
        "ResourceId": {
          "Ref": "ApiGatewayAuthResource"
        },
        "RestApiId": {
          "Ref": "ApiGatewayApi"
        }
      }
    },
    "ApiGatewayAuthOptionsMethod": {
      "DependsOn": [
        "ApiGatewayAuthResource"
      ],
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ],
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "Type": "MOCK"
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            },
            "StatusCode": 200
          }
        ],
        "ResourceId": {
          "Ref": "ApiGatewayAuthResource"
        },
        "RestApiId": {
          "Ref": "ApiGatewayApi"
        }
      }
    },
    "ApiGatewayDeployment": {
      "DependsOn": [
        "ApiGatewayAnonGetMethod",
        "ApiGatewayAnonOptionsMethod",
        "ApiGatewayAuthGetMethod",
        "ApiGatewayAuthPostMethod",
        "ApiGatewayAuthOptionsMethod"
      ],
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "Description": "Deployment for the stage.",
        "RestApiId": {
          "Ref": "ApiGatewayApi"
        },
        "StageName": "LATEST"
      }
    },
    "ApiHandlerLambdaPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "ServiceWorkerApiLambdaPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ActionDynamoDbAccess",
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:Query"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "DynamicTableAction",
                  "Arn"
                ]
              }
            },
            {
              "Sid": "ItemDataDynamoDbAccess",
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:Query"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "DynamicTableItemData",
                  "Arn"
                ]
              }
            },
            {
              "Sid": "ItemLinkDynamoDbAccess",
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:Query"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "DynamicTableItemLink",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ApiHandlerLambdaRole"
          }
        ]
      }
    },
    "ApiHandlerLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Description": "Role for the API Lambda.",
        "Path": "/",
        "Tags": [
          {
            "Key": "Project",
            "Value": "NaturalFacade"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "ApiAnonHandlerLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ApiAnonHandlerLambda",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:ap-southeast-2:",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "ApiAnonHandlerLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Lambda to process API requests.",
        "Code": {
          "S3Bucket": "naturalfacade",
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                "apibuilds",
                {
                  "Ref": "ApiBuildFilename"
                }
              ]
            ]
          }
        },
        "Environment": {
          "Variables": {
            "Environment": {
              "Ref": "Environment"
            },
            "DbTableAction": {
              "Ref": "DynamicTableAction"
            },
            "DbTableItemData": {
              "Ref": "DynamicTableItemData"
            },
            "DbTableItemLink": {
              "Ref": "DynamicTableItemLink"
            }
          }
        },
        "Handler": "NaturalFacade.ApiLambdas::NaturalFacade.ApiLambdas.Functions::AnonFunctionHandler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "ApiHandlerLambdaRole",
            "Arn"
          ]
        },
        "Role": "arn:aws:iam::582929002414:role/LambdaExecution",
        "Runtime": "dotnet6",
        "Timeout": 15
      }
    },
    "ApiAuthHandlerLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ApiAuthHandlerLambda",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:ap-southeast-2:",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "ApiAuthHandlerLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Lambda to process API requests.",
        "Code": {
          "S3Bucket": "naturalfacade",
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                "apibuilds",
                {
                  "Ref": "ApiBuildFilename"
                }
              ]
            ]
          }
        },
        "Environment": {
          "Variables": {
            "Environment": {
              "Ref": "Environment"
            },
            "DbTableAction": {
              "Ref": "DynamicTableAction"
            },
            "DbTableItemData": {
              "Ref": "DynamicTableItemData"
            },
            "DbTableItemLink": {
              "Ref": "DynamicTableItemLink"
            }
          }
        },
        "Handler": "NaturalFacade.ApiLambdas::NaturalFacade.ApiLambdas.Functions::AuthFunctionHandler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "ApiHandlerLambdaRole",
            "Arn"
          ]
        },
        "Role": "arn:aws:iam::582929002414:role/LambdaExecution",
        "Runtime": "dotnet6",
        "Timeout": 15
      }
    },
    "DynamicTableAction": { 
      "Type": "AWS::DynamoDB::Table", 
      "Properties": { 
        "AttributeDefinitions": [ 
          { 
            "AttributeName": "UserId", 
            "AttributeType": "S" 
          }, 
          { 
            "AttributeName": "DateTimeUtc", 
            "AttributeType": "S" 
          } 
        ], 
        "BillingMode": "PAY_PER_REQUEST", 
        "KeySchema": [ 
          { 
            "AttributeName": "UserId", 
            "KeyType": "HASH" 
          }, 
          { 
            "AttributeName": "DateTimeUtc", 
            "KeyType": "RANGE" 
          } 
        ] 
      } 
    },
    "DynamicTableItemData": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "ItemId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "DataId",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "ItemId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "ComponentId",
            "KeyType": "RANGE"
          }
        ]
      }
    },
    "DynamicTableItemLink": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "ParentId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "ChildId",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "ParentId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "ChildId",
            "KeyType": "RANGE"
          }
        ]
      }
    }
  }
}